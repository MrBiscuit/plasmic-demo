// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hM9GRXxMGXhTkxrnS16qDc
// Component: hK49oB3F3T

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_code_gen_demo.module.css"; // plasmic-import: hM9GRXxMGXhTkxrnS16qDc/projectcss
import sty from "./PlasmicDropdownItem.module.css"; // plasmic-import: hK49oB3F3T/css

export type PlasmicDropdownItem__VariantMembers = {
  isLastOne: "isLastOne";
};
export type PlasmicDropdownItem__VariantsArgs = {
  isLastOne?: SingleBooleanChoiceArg<"isLastOne">;
};
type VariantPropType = keyof PlasmicDropdownItem__VariantsArgs;
export const PlasmicDropdownItem__VariantProps = new Array<VariantPropType>(
  "isLastOne"
);

export type PlasmicDropdownItem__ArgsType = {
  value?: string;
  onValueChange?: (val: string) => void;
  onClick?: () => void;
};
type ArgPropType = keyof PlasmicDropdownItem__ArgsType;
export const PlasmicDropdownItem__ArgProps = new Array<ArgPropType>(
  "value",
  "onValueChange",
  "onClick"
);

export type PlasmicDropdownItem__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultDropdownItemProps {
  value?: string;
  onValueChange?: (val: string) => void;
  onClick?: () => void;
  isLastOne?: SingleBooleanChoiceArg<"isLastOne">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicDropdownItem__RenderFunc(props: {
  variants: PlasmicDropdownItem__VariantsArgs;
  args: PlasmicDropdownItem__ArgsType;
  overrides: PlasmicDropdownItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          onClick: async event => {
            const $steps = {};
            $steps["updateValue"] = true
              ? (() => {
                  const actionArgs = {
                    variable: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "a90Krq3Sv",
                        componentUuid: "hK49oB3F3T",
                        argName: "variable"
                      },
                      () => ({
                        objRoot: $state,
                        variablePath: ["value"]
                      })
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "a90Krq3Sv",
                        componentUuid: "hK49oB3F3T",
                        argName: "operation"
                      },
                      () => 0
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "a90Krq3Sv",
                      componentUuid: "hK49oB3F3T"
                    },
                    () =>
                      (({ variable, value, startIndex, deleteCount }) => {
                        const { objRoot, variablePath } = variable;

                        p.set(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
            if (
              typeof $steps["updateValue"] === "object" &&
              typeof $steps["updateValue"].then === "function"
            ) {
              $steps["updateValue"] = await __wrapUserPromise(
                {
                  type: "InteractionLoc",
                  actionName: "updateVariable",
                  interactionUuid: "a90Krq3Sv",
                  componentUuid: "hK49oB3F3T"
                },
                $steps["updateValue"]
              );
            }
          }
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "value",
        type: "writable",
        variableType: "text",

        valueProp: "value",
        onChangeProp: "onValueChange"
      },
      {
        path: "isLastOne",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isLastOne
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootisLastOne]: hasVariant($state, "isLastOne", "isLastOne") }
      )}
      onClick={args.onClick}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textisLastOne]: hasVariant($state, "isLastOne", "isLastOne")
        })}
      >
        {(() => {
          try {
            return $state.value;
          } catch (e) {
            if (e instanceof TypeError) {
              return "item";
            }
            throw e;
          }
        })()}
      </div>
      {(hasVariant($state, "isLastOne", "isLastOne") ? true : true) ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxisLastOne]: hasVariant($state, "isLastOne", "isLastOne")
          })}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "freeBox"],
  text: ["text"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDropdownItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDropdownItem__VariantsArgs;
    args?: PlasmicDropdownItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDropdownItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDropdownItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDropdownItem__ArgProps,
          internalVariantPropNames: PlasmicDropdownItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDropdownItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDropdownItem";
  } else {
    func.displayName = `PlasmicDropdownItem.${nodeName}`;
  }
  return func;
}

export const PlasmicDropdownItem = Object.assign(
  // Top-level PlasmicDropdownItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicDropdownItem
    internalVariantProps: PlasmicDropdownItem__VariantProps,
    internalArgProps: PlasmicDropdownItem__ArgProps
  }
);

export default PlasmicDropdownItem;
/* prettier-ignore-end */
